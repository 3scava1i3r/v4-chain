// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	perpetualstypes "github.com/dydxprotocol/v4-chain/protocol/x/perpetuals/types"
	mock "github.com/stretchr/testify/mock"
)

// PricePremiumGetter is an autogenerated mock type for the PricePremiumGetter type
type PricePremiumGetter struct {
	mock.Mock
}

// GetPricePremiumForPerpetual provides a mock function with given fields: ctx, perpetualId, params
func (_m *PricePremiumGetter) GetPricePremiumForPerpetual(ctx types.Context, perpetualId uint32, params perpetualstypes.GetPricePremiumParams) (int32, error) {
	ret := _m.Called(ctx, perpetualId, params)

	var r0 int32
	if rf, ok := ret.Get(0).(func(types.Context, uint32, perpetualstypes.GetPricePremiumParams) int32); ok {
		r0 = rf(ctx, perpetualId, params)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.Context, uint32, perpetualstypes.GetPricePremiumParams) error); ok {
		r1 = rf(ctx, perpetualId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPricePremiumGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewPricePremiumGetter creates a new instance of PricePremiumGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPricePremiumGetter(t mockConstructorTestingTNewPricePremiumGetter) *PricePremiumGetter {
	mock := &PricePremiumGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

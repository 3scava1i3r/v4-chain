// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	proto "github.com/cosmos/gogoproto/proto"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/codec/types"
)

// InterfaceRegistry is an autogenerated mock type for the InterfaceRegistry type
type InterfaceRegistry struct {
	mock.Mock
}

// EnsureRegistered provides a mock function with given fields: iface
func (_m *InterfaceRegistry) EnsureRegistered(iface interface{}) error {
	ret := _m.Called(iface)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(iface)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAllInterfaces provides a mock function with given fields:
func (_m *InterfaceRegistry) ListAllInterfaces() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ListImplementations provides a mock function with given fields: ifaceTypeURL
func (_m *InterfaceRegistry) ListImplementations(ifaceTypeURL string) []string {
	ret := _m.Called(ifaceTypeURL)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(ifaceTypeURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RegisterImplementations provides a mock function with given fields: iface, impls
func (_m *InterfaceRegistry) RegisterImplementations(iface interface{}, impls ...proto.Message) {
	_va := make([]interface{}, len(impls))
	for _i := range impls {
		_va[_i] = impls[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, iface)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// RegisterInterface provides a mock function with given fields: protoName, iface, impls
func (_m *InterfaceRegistry) RegisterInterface(protoName string, iface interface{}, impls ...proto.Message) {
	_va := make([]interface{}, len(impls))
	for _i := range impls {
		_va[_i] = impls[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, protoName, iface)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Resolve provides a mock function with given fields: typeUrl
func (_m *InterfaceRegistry) Resolve(typeUrl string) (proto.Message, error) {
	ret := _m.Called(typeUrl)

	var r0 proto.Message
	if rf, ok := ret.Get(0).(func(string) proto.Message); ok {
		r0 = rf(typeUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(typeUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpackAny provides a mock function with given fields: any, iface
func (_m *InterfaceRegistry) UnpackAny(any *types.Any, iface interface{}) error {
	ret := _m.Called(any, iface)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Any, interface{}) error); ok {
		r0 = rf(any, iface)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewInterfaceRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewInterfaceRegistry creates a new instance of InterfaceRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInterfaceRegistry(t mockConstructorTestingTNewInterfaceRegistry) *InterfaceRegistry {
	mock := &InterfaceRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

syntax = "proto3";
package dydxprotocol.clob;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "dydxprotocol/clob/clob_pair.proto";
import "dydxprotocol/subaccounts/subaccount.proto";

option go_package = "github.com/dydxprotocol/v4/x/clob/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a ClobPair by id.
  rpc ClobPair(QueryGetClobPairRequest) returns (QueryClobPairResponse) {
    option (google.api.http).get = "/dydxprotocol/clob/clob_pair/{id}";
  }

  // Queries a list of ClobPair items.
  rpc ClobPairAll(QueryAllClobPairRequest) returns (QueryClobPairAllResponse) {
    option (google.api.http).get = "/dydxprotocol/clob/clob_pair";
  }

  // Returns whether a subaccount is liquidatable.
  rpc AreSubaccountsLiquidatable(AreSubaccountsLiquidatableRequest)
      returns (AreSubaccountsLiquidatableResponse);
}

// QueryGetClobPairRequest is request type for the QueryRPC method.
message QueryGetClobPairRequest { uint32 id = 1; }

// QueryClobPairResponse is response type for the QueryRPC method.
message QueryClobPairResponse {
  ClobPair clob_pair = 1 [ (gogoproto.nullable) = false ];
}

// QueryAllClobPairRequest is request type for the QueryRPC method.
message QueryAllClobPairRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryClobPairAllResponse is request type for the QueryRPC method.
message QueryClobPairAllResponse {
  repeated ClobPair clob_pair = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// AreSubaccountsLiquidatableRequest is a request message used to check whether
// the given subaccounts are liquidatable.
// The subaccount ids should not contain duplicates.
message AreSubaccountsLiquidatableRequest {
  repeated dydxprotocol.subaccounts.SubaccountId subaccount_ids = 1
      [ (gogoproto.nullable) = false ];
}

// AreSubaccountsLiquidatableResponse is a response message that contains the
// liquidation status for each subaccount.
message AreSubaccountsLiquidatableResponse {
  // Result returns whether a subaccount should be liquidated.
  message Result {
    dydxprotocol.subaccounts.SubaccountId subaccount_id = 1
        [ (gogoproto.nullable) = false ];
    bool is_liquidatable = 2;
  }
  repeated Result results = 1 [ (gogoproto.nullable) = false ];
}
